// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021011 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_2eproto;
namespace mytest {
class GetFriendListRequest;
struct GetFriendListRequestDefaultTypeInternal;
extern GetFriendListRequestDefaultTypeInternal _GetFriendListRequest_default_instance_;
class GetFriendListRequest_TestEntry_DoNotUse;
struct GetFriendListRequest_TestEntry_DoNotUseDefaultTypeInternal;
extern GetFriendListRequest_TestEntry_DoNotUseDefaultTypeInternal _GetFriendListRequest_TestEntry_DoNotUse_default_instance_;
class GetFriendListResPonse;
struct GetFriendListResPonseDefaultTypeInternal;
extern GetFriendListResPonseDefaultTypeInternal _GetFriendListResPonse_default_instance_;
class LoginRequest;
struct LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class LoginResponse;
struct LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
class ResultCode;
struct ResultCodeDefaultTypeInternal;
extern ResultCodeDefaultTypeInternal _ResultCode_default_instance_;
class User;
struct UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
}  // namespace mytest
PROTOBUF_NAMESPACE_OPEN
template<> ::mytest::GetFriendListRequest* Arena::CreateMaybeMessage<::mytest::GetFriendListRequest>(Arena*);
template<> ::mytest::GetFriendListRequest_TestEntry_DoNotUse* Arena::CreateMaybeMessage<::mytest::GetFriendListRequest_TestEntry_DoNotUse>(Arena*);
template<> ::mytest::GetFriendListResPonse* Arena::CreateMaybeMessage<::mytest::GetFriendListResPonse>(Arena*);
template<> ::mytest::LoginRequest* Arena::CreateMaybeMessage<::mytest::LoginRequest>(Arena*);
template<> ::mytest::LoginResponse* Arena::CreateMaybeMessage<::mytest::LoginResponse>(Arena*);
template<> ::mytest::ResultCode* Arena::CreateMaybeMessage<::mytest::ResultCode>(Arena*);
template<> ::mytest::User* Arena::CreateMaybeMessage<::mytest::User>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mytest {

enum User_Sex : int {
  User_Sex_MAN = 0,
  User_Sex_WOMAN = 1,
  User_Sex_User_Sex_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  User_Sex_User_Sex_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool User_Sex_IsValid(int value);
constexpr User_Sex User_Sex_Sex_MIN = User_Sex_MAN;
constexpr User_Sex User_Sex_Sex_MAX = User_Sex_WOMAN;
constexpr int User_Sex_Sex_ARRAYSIZE = User_Sex_Sex_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* User_Sex_descriptor();
template<typename T>
inline const std::string& User_Sex_Name(T enum_t_value) {
  static_assert(::std::is_same<T, User_Sex>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function User_Sex_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    User_Sex_descriptor(), enum_t_value);
}
inline bool User_Sex_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, User_Sex* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<User_Sex>(
    User_Sex_descriptor(), name, value);
}
// ===================================================================

class ResultCode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mytest.ResultCode) */ {
 public:
  inline ResultCode() : ResultCode(nullptr) {}
  ~ResultCode() override;
  explicit PROTOBUF_CONSTEXPR ResultCode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResultCode(const ResultCode& from);
  ResultCode(ResultCode&& from) noexcept
    : ResultCode() {
    *this = ::std::move(from);
  }

  inline ResultCode& operator=(const ResultCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultCode& operator=(ResultCode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResultCode& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResultCode* internal_default_instance() {
    return reinterpret_cast<const ResultCode*>(
               &_ResultCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ResultCode& a, ResultCode& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultCode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResultCode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResultCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResultCode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResultCode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResultCode& from) {
    ResultCode::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultCode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mytest.ResultCode";
  }
  protected:
  explicit ResultCode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrstrFieldNumber = 2,
    kErrnumFieldNumber = 1,
    kSuccessFieldNumber = 3,
  };
  // bytes errstr = 2;
  void clear_errstr();
  const std::string& errstr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errstr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errstr();
  PROTOBUF_NODISCARD std::string* release_errstr();
  void set_allocated_errstr(std::string* errstr);
  private:
  const std::string& _internal_errstr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errstr(const std::string& value);
  std::string* _internal_mutable_errstr();
  public:

  // int32 errnum = 1;
  void clear_errnum();
  int32_t errnum() const;
  void set_errnum(int32_t value);
  private:
  int32_t _internal_errnum() const;
  void _internal_set_errnum(int32_t value);
  public:

  // bool success = 3;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mytest.ResultCode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errstr_;
    int32_t errnum_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class LoginRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mytest.LoginRequest) */ {
 public:
  inline LoginRequest() : LoginRequest(nullptr) {}
  ~LoginRequest() override;
  explicit PROTOBUF_CONSTEXPR LoginRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginRequest(const LoginRequest& from);
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoginRequest& from) {
    LoginRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mytest.LoginRequest";
  }
  protected:
  explicit LoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPswdFieldNumber = 2,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes pswd = 2;
  void clear_pswd();
  const std::string& pswd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pswd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pswd();
  PROTOBUF_NODISCARD std::string* release_pswd();
  void set_allocated_pswd(std::string* pswd);
  private:
  const std::string& _internal_pswd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pswd(const std::string& value);
  std::string* _internal_mutable_pswd();
  public:

  // @@protoc_insertion_point(class_scope:mytest.LoginRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pswd_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class LoginResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mytest.LoginResponse) */ {
 public:
  inline LoginResponse() : LoginResponse(nullptr) {}
  ~LoginResponse() override;
  explicit PROTOBUF_CONSTEXPR LoginResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginResponse(const LoginResponse& from);
  LoginResponse(LoginResponse&& from) noexcept
    : LoginResponse() {
    *this = ::std::move(from);
  }

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResponse& operator=(LoginResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginResponse* internal_default_instance() {
    return reinterpret_cast<const LoginResponse*>(
               &_LoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LoginResponse& a, LoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoginResponse& from) {
    LoginResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mytest.LoginResponse";
  }
  protected:
  explicit LoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResFieldNumber = 1,
  };
  // .mytest.ResultCode res = 1;
  bool has_res() const;
  private:
  bool _internal_has_res() const;
  public:
  void clear_res();
  const ::mytest::ResultCode& res() const;
  PROTOBUF_NODISCARD ::mytest::ResultCode* release_res();
  ::mytest::ResultCode* mutable_res();
  void set_allocated_res(::mytest::ResultCode* res);
  private:
  const ::mytest::ResultCode& _internal_res() const;
  ::mytest::ResultCode* _internal_mutable_res();
  public:
  void unsafe_arena_set_allocated_res(
      ::mytest::ResultCode* res);
  ::mytest::ResultCode* unsafe_arena_release_res();

  // @@protoc_insertion_point(class_scope:mytest.LoginResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mytest::ResultCode* res_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class GetFriendListRequest_TestEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetFriendListRequest_TestEntry_DoNotUse, 
    int32_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetFriendListRequest_TestEntry_DoNotUse, 
    int32_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  GetFriendListRequest_TestEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR GetFriendListRequest_TestEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit GetFriendListRequest_TestEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetFriendListRequest_TestEntry_DoNotUse& other);
  static const GetFriendListRequest_TestEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetFriendListRequest_TestEntry_DoNotUse*>(&_GetFriendListRequest_TestEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "mytest.GetFriendListRequest.TestEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_test_2eproto;
};

// -------------------------------------------------------------------

class GetFriendListRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mytest.GetFriendListRequest) */ {
 public:
  inline GetFriendListRequest() : GetFriendListRequest(nullptr) {}
  ~GetFriendListRequest() override;
  explicit PROTOBUF_CONSTEXPR GetFriendListRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFriendListRequest(const GetFriendListRequest& from);
  GetFriendListRequest(GetFriendListRequest&& from) noexcept
    : GetFriendListRequest() {
    *this = ::std::move(from);
  }

  inline GetFriendListRequest& operator=(const GetFriendListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFriendListRequest& operator=(GetFriendListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFriendListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFriendListRequest* internal_default_instance() {
    return reinterpret_cast<const GetFriendListRequest*>(
               &_GetFriendListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetFriendListRequest& a, GetFriendListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFriendListRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFriendListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFriendListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFriendListRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFriendListRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetFriendListRequest& from) {
    GetFriendListRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFriendListRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mytest.GetFriendListRequest";
  }
  protected:
  explicit GetFriendListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTestFieldNumber = 3,
    kUseridFieldNumber = 1,
  };
  // map<int32, string> test = 3;
  int test_size() const;
  private:
  int _internal_test_size() const;
  public:
  void clear_test();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >&
      _internal_test() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >*
      _internal_mutable_test();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >&
      test() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >*
      mutable_test();

  // uint32 userid = 1;
  void clear_userid();
  uint32_t userid() const;
  void set_userid(uint32_t value);
  private:
  uint32_t _internal_userid() const;
  void _internal_set_userid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mytest.GetFriendListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        GetFriendListRequest_TestEntry_DoNotUse,
        int32_t, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> test_;
    uint32_t userid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class User final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mytest.User) */ {
 public:
  inline User() : User(nullptr) {}
  ~User() override;
  explicit PROTOBUF_CONSTEXPR User(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User& default_instance() {
    return *internal_default_instance();
  }
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const User& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const User& from) {
    User::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mytest.User";
  }
  protected:
  explicit User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef User_Sex Sex;
  static constexpr Sex MAN =
    User_Sex_MAN;
  static constexpr Sex WOMAN =
    User_Sex_WOMAN;
  static inline bool Sex_IsValid(int value) {
    return User_Sex_IsValid(value);
  }
  static constexpr Sex Sex_MIN =
    User_Sex_Sex_MIN;
  static constexpr Sex Sex_MAX =
    User_Sex_Sex_MAX;
  static constexpr int Sex_ARRAYSIZE =
    User_Sex_Sex_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Sex_descriptor() {
    return User_Sex_descriptor();
  }
  template<typename T>
  static inline const std::string& Sex_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Sex>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Sex_Name.");
    return User_Sex_Name(enum_t_value);
  }
  static inline bool Sex_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Sex* value) {
    return User_Sex_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAgeFieldNumber = 2,
    kSexFieldNumber = 3,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 age = 2;
  void clear_age();
  uint32_t age() const;
  void set_age(uint32_t value);
  private:
  uint32_t _internal_age() const;
  void _internal_set_age(uint32_t value);
  public:

  // .mytest.User.Sex sex = 3;
  void clear_sex();
  ::mytest::User_Sex sex() const;
  void set_sex(::mytest::User_Sex value);
  private:
  ::mytest::User_Sex _internal_sex() const;
  void _internal_set_sex(::mytest::User_Sex value);
  public:

  // @@protoc_insertion_point(class_scope:mytest.User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t age_;
    int sex_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class GetFriendListResPonse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mytest.GetFriendListResPonse) */ {
 public:
  inline GetFriendListResPonse() : GetFriendListResPonse(nullptr) {}
  ~GetFriendListResPonse() override;
  explicit PROTOBUF_CONSTEXPR GetFriendListResPonse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFriendListResPonse(const GetFriendListResPonse& from);
  GetFriendListResPonse(GetFriendListResPonse&& from) noexcept
    : GetFriendListResPonse() {
    *this = ::std::move(from);
  }

  inline GetFriendListResPonse& operator=(const GetFriendListResPonse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFriendListResPonse& operator=(GetFriendListResPonse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFriendListResPonse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFriendListResPonse* internal_default_instance() {
    return reinterpret_cast<const GetFriendListResPonse*>(
               &_GetFriendListResPonse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetFriendListResPonse& a, GetFriendListResPonse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFriendListResPonse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFriendListResPonse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFriendListResPonse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFriendListResPonse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFriendListResPonse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetFriendListResPonse& from) {
    GetFriendListResPonse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFriendListResPonse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mytest.GetFriendListResPonse";
  }
  protected:
  explicit GetFriendListResPonse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendListFieldNumber = 2,
    kResFieldNumber = 1,
  };
  // repeated .mytest.User friend_list = 2;
  int friend_list_size() const;
  private:
  int _internal_friend_list_size() const;
  public:
  void clear_friend_list();
  ::mytest::User* mutable_friend_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mytest::User >*
      mutable_friend_list();
  private:
  const ::mytest::User& _internal_friend_list(int index) const;
  ::mytest::User* _internal_add_friend_list();
  public:
  const ::mytest::User& friend_list(int index) const;
  ::mytest::User* add_friend_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mytest::User >&
      friend_list() const;

  // .mytest.ResultCode res = 1;
  bool has_res() const;
  private:
  bool _internal_has_res() const;
  public:
  void clear_res();
  const ::mytest::ResultCode& res() const;
  PROTOBUF_NODISCARD ::mytest::ResultCode* release_res();
  ::mytest::ResultCode* mutable_res();
  void set_allocated_res(::mytest::ResultCode* res);
  private:
  const ::mytest::ResultCode& _internal_res() const;
  ::mytest::ResultCode* _internal_mutable_res();
  public:
  void unsafe_arena_set_allocated_res(
      ::mytest::ResultCode* res);
  ::mytest::ResultCode* unsafe_arena_release_res();

  // @@protoc_insertion_point(class_scope:mytest.GetFriendListResPonse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mytest::User > friend_list_;
    ::mytest::ResultCode* res_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// ===================================================================

class UserServiceRpc_Stub;

class UserServiceRpc : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline UserServiceRpc() {};
 public:
  virtual ~UserServiceRpc();

  typedef UserServiceRpc_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void Login(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::mytest::LoginRequest* request,
                       ::mytest::LoginResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetFriendList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::mytest::GetFriendListRequest* request,
                       ::mytest::GetFriendListResPonse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserServiceRpc);
};

class UserServiceRpc_Stub : public UserServiceRpc {
 public:
  UserServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  UserServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~UserServiceRpc_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements UserServiceRpc ------------------------------------------

  void Login(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::mytest::LoginRequest* request,
                       ::mytest::LoginResponse* response,
                       ::google::protobuf::Closure* done);
  void GetFriendList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::mytest::GetFriendListRequest* request,
                       ::mytest::GetFriendListResPonse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserServiceRpc_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ResultCode

// int32 errnum = 1;
inline void ResultCode::clear_errnum() {
  _impl_.errnum_ = 0;
}
inline int32_t ResultCode::_internal_errnum() const {
  return _impl_.errnum_;
}
inline int32_t ResultCode::errnum() const {
  // @@protoc_insertion_point(field_get:mytest.ResultCode.errnum)
  return _internal_errnum();
}
inline void ResultCode::_internal_set_errnum(int32_t value) {
  
  _impl_.errnum_ = value;
}
inline void ResultCode::set_errnum(int32_t value) {
  _internal_set_errnum(value);
  // @@protoc_insertion_point(field_set:mytest.ResultCode.errnum)
}

// bytes errstr = 2;
inline void ResultCode::clear_errstr() {
  _impl_.errstr_.ClearToEmpty();
}
inline const std::string& ResultCode::errstr() const {
  // @@protoc_insertion_point(field_get:mytest.ResultCode.errstr)
  return _internal_errstr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResultCode::set_errstr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errstr_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mytest.ResultCode.errstr)
}
inline std::string* ResultCode::mutable_errstr() {
  std::string* _s = _internal_mutable_errstr();
  // @@protoc_insertion_point(field_mutable:mytest.ResultCode.errstr)
  return _s;
}
inline const std::string& ResultCode::_internal_errstr() const {
  return _impl_.errstr_.Get();
}
inline void ResultCode::_internal_set_errstr(const std::string& value) {
  
  _impl_.errstr_.Set(value, GetArenaForAllocation());
}
inline std::string* ResultCode::_internal_mutable_errstr() {
  
  return _impl_.errstr_.Mutable(GetArenaForAllocation());
}
inline std::string* ResultCode::release_errstr() {
  // @@protoc_insertion_point(field_release:mytest.ResultCode.errstr)
  return _impl_.errstr_.Release();
}
inline void ResultCode::set_allocated_errstr(std::string* errstr) {
  if (errstr != nullptr) {
    
  } else {
    
  }
  _impl_.errstr_.SetAllocated(errstr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errstr_.IsDefault()) {
    _impl_.errstr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mytest.ResultCode.errstr)
}

// bool success = 3;
inline void ResultCode::clear_success() {
  _impl_.success_ = false;
}
inline bool ResultCode::_internal_success() const {
  return _impl_.success_;
}
inline bool ResultCode::success() const {
  // @@protoc_insertion_point(field_get:mytest.ResultCode.success)
  return _internal_success();
}
inline void ResultCode::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void ResultCode::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:mytest.ResultCode.success)
}

// -------------------------------------------------------------------

// LoginRequest

// bytes name = 1;
inline void LoginRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& LoginRequest::name() const {
  // @@protoc_insertion_point(field_get:mytest.LoginRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mytest.LoginRequest.name)
}
inline std::string* LoginRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mytest.LoginRequest.name)
  return _s;
}
inline const std::string& LoginRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void LoginRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginRequest::release_name() {
  // @@protoc_insertion_point(field_release:mytest.LoginRequest.name)
  return _impl_.name_.Release();
}
inline void LoginRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mytest.LoginRequest.name)
}

// bytes pswd = 2;
inline void LoginRequest::clear_pswd() {
  _impl_.pswd_.ClearToEmpty();
}
inline const std::string& LoginRequest::pswd() const {
  // @@protoc_insertion_point(field_get:mytest.LoginRequest.pswd)
  return _internal_pswd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginRequest::set_pswd(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pswd_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mytest.LoginRequest.pswd)
}
inline std::string* LoginRequest::mutable_pswd() {
  std::string* _s = _internal_mutable_pswd();
  // @@protoc_insertion_point(field_mutable:mytest.LoginRequest.pswd)
  return _s;
}
inline const std::string& LoginRequest::_internal_pswd() const {
  return _impl_.pswd_.Get();
}
inline void LoginRequest::_internal_set_pswd(const std::string& value) {
  
  _impl_.pswd_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginRequest::_internal_mutable_pswd() {
  
  return _impl_.pswd_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginRequest::release_pswd() {
  // @@protoc_insertion_point(field_release:mytest.LoginRequest.pswd)
  return _impl_.pswd_.Release();
}
inline void LoginRequest::set_allocated_pswd(std::string* pswd) {
  if (pswd != nullptr) {
    
  } else {
    
  }
  _impl_.pswd_.SetAllocated(pswd, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pswd_.IsDefault()) {
    _impl_.pswd_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mytest.LoginRequest.pswd)
}

// -------------------------------------------------------------------

// LoginResponse

// .mytest.ResultCode res = 1;
inline bool LoginResponse::_internal_has_res() const {
  return this != internal_default_instance() && _impl_.res_ != nullptr;
}
inline bool LoginResponse::has_res() const {
  return _internal_has_res();
}
inline void LoginResponse::clear_res() {
  if (GetArenaForAllocation() == nullptr && _impl_.res_ != nullptr) {
    delete _impl_.res_;
  }
  _impl_.res_ = nullptr;
}
inline const ::mytest::ResultCode& LoginResponse::_internal_res() const {
  const ::mytest::ResultCode* p = _impl_.res_;
  return p != nullptr ? *p : reinterpret_cast<const ::mytest::ResultCode&>(
      ::mytest::_ResultCode_default_instance_);
}
inline const ::mytest::ResultCode& LoginResponse::res() const {
  // @@protoc_insertion_point(field_get:mytest.LoginResponse.res)
  return _internal_res();
}
inline void LoginResponse::unsafe_arena_set_allocated_res(
    ::mytest::ResultCode* res) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.res_);
  }
  _impl_.res_ = res;
  if (res) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mytest.LoginResponse.res)
}
inline ::mytest::ResultCode* LoginResponse::release_res() {
  
  ::mytest::ResultCode* temp = _impl_.res_;
  _impl_.res_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mytest::ResultCode* LoginResponse::unsafe_arena_release_res() {
  // @@protoc_insertion_point(field_release:mytest.LoginResponse.res)
  
  ::mytest::ResultCode* temp = _impl_.res_;
  _impl_.res_ = nullptr;
  return temp;
}
inline ::mytest::ResultCode* LoginResponse::_internal_mutable_res() {
  
  if (_impl_.res_ == nullptr) {
    auto* p = CreateMaybeMessage<::mytest::ResultCode>(GetArenaForAllocation());
    _impl_.res_ = p;
  }
  return _impl_.res_;
}
inline ::mytest::ResultCode* LoginResponse::mutable_res() {
  ::mytest::ResultCode* _msg = _internal_mutable_res();
  // @@protoc_insertion_point(field_mutable:mytest.LoginResponse.res)
  return _msg;
}
inline void LoginResponse::set_allocated_res(::mytest::ResultCode* res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.res_;
  }
  if (res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(res);
    if (message_arena != submessage_arena) {
      res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, res, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.res_ = res;
  // @@protoc_insertion_point(field_set_allocated:mytest.LoginResponse.res)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetFriendListRequest

// uint32 userid = 1;
inline void GetFriendListRequest::clear_userid() {
  _impl_.userid_ = 0u;
}
inline uint32_t GetFriendListRequest::_internal_userid() const {
  return _impl_.userid_;
}
inline uint32_t GetFriendListRequest::userid() const {
  // @@protoc_insertion_point(field_get:mytest.GetFriendListRequest.userid)
  return _internal_userid();
}
inline void GetFriendListRequest::_internal_set_userid(uint32_t value) {
  
  _impl_.userid_ = value;
}
inline void GetFriendListRequest::set_userid(uint32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:mytest.GetFriendListRequest.userid)
}

// map<int32, string> test = 3;
inline int GetFriendListRequest::_internal_test_size() const {
  return _impl_.test_.size();
}
inline int GetFriendListRequest::test_size() const {
  return _internal_test_size();
}
inline void GetFriendListRequest::clear_test() {
  _impl_.test_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >&
GetFriendListRequest::_internal_test() const {
  return _impl_.test_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >&
GetFriendListRequest::test() const {
  // @@protoc_insertion_point(field_map:mytest.GetFriendListRequest.test)
  return _internal_test();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >*
GetFriendListRequest::_internal_mutable_test() {
  return _impl_.test_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >*
GetFriendListRequest::mutable_test() {
  // @@protoc_insertion_point(field_mutable_map:mytest.GetFriendListRequest.test)
  return _internal_mutable_test();
}

// -------------------------------------------------------------------

// User

// bytes name = 1;
inline void User::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& User::name() const {
  // @@protoc_insertion_point(field_get:mytest.User.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mytest.User.name)
}
inline std::string* User::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mytest.User.name)
  return _s;
}
inline const std::string& User::_internal_name() const {
  return _impl_.name_.Get();
}
inline void User::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* User::release_name() {
  // @@protoc_insertion_point(field_release:mytest.User.name)
  return _impl_.name_.Release();
}
inline void User::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mytest.User.name)
}

// uint32 age = 2;
inline void User::clear_age() {
  _impl_.age_ = 0u;
}
inline uint32_t User::_internal_age() const {
  return _impl_.age_;
}
inline uint32_t User::age() const {
  // @@protoc_insertion_point(field_get:mytest.User.age)
  return _internal_age();
}
inline void User::_internal_set_age(uint32_t value) {
  
  _impl_.age_ = value;
}
inline void User::set_age(uint32_t value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:mytest.User.age)
}

// .mytest.User.Sex sex = 3;
inline void User::clear_sex() {
  _impl_.sex_ = 0;
}
inline ::mytest::User_Sex User::_internal_sex() const {
  return static_cast< ::mytest::User_Sex >(_impl_.sex_);
}
inline ::mytest::User_Sex User::sex() const {
  // @@protoc_insertion_point(field_get:mytest.User.sex)
  return _internal_sex();
}
inline void User::_internal_set_sex(::mytest::User_Sex value) {
  
  _impl_.sex_ = value;
}
inline void User::set_sex(::mytest::User_Sex value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:mytest.User.sex)
}

// -------------------------------------------------------------------

// GetFriendListResPonse

// .mytest.ResultCode res = 1;
inline bool GetFriendListResPonse::_internal_has_res() const {
  return this != internal_default_instance() && _impl_.res_ != nullptr;
}
inline bool GetFriendListResPonse::has_res() const {
  return _internal_has_res();
}
inline void GetFriendListResPonse::clear_res() {
  if (GetArenaForAllocation() == nullptr && _impl_.res_ != nullptr) {
    delete _impl_.res_;
  }
  _impl_.res_ = nullptr;
}
inline const ::mytest::ResultCode& GetFriendListResPonse::_internal_res() const {
  const ::mytest::ResultCode* p = _impl_.res_;
  return p != nullptr ? *p : reinterpret_cast<const ::mytest::ResultCode&>(
      ::mytest::_ResultCode_default_instance_);
}
inline const ::mytest::ResultCode& GetFriendListResPonse::res() const {
  // @@protoc_insertion_point(field_get:mytest.GetFriendListResPonse.res)
  return _internal_res();
}
inline void GetFriendListResPonse::unsafe_arena_set_allocated_res(
    ::mytest::ResultCode* res) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.res_);
  }
  _impl_.res_ = res;
  if (res) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mytest.GetFriendListResPonse.res)
}
inline ::mytest::ResultCode* GetFriendListResPonse::release_res() {
  
  ::mytest::ResultCode* temp = _impl_.res_;
  _impl_.res_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mytest::ResultCode* GetFriendListResPonse::unsafe_arena_release_res() {
  // @@protoc_insertion_point(field_release:mytest.GetFriendListResPonse.res)
  
  ::mytest::ResultCode* temp = _impl_.res_;
  _impl_.res_ = nullptr;
  return temp;
}
inline ::mytest::ResultCode* GetFriendListResPonse::_internal_mutable_res() {
  
  if (_impl_.res_ == nullptr) {
    auto* p = CreateMaybeMessage<::mytest::ResultCode>(GetArenaForAllocation());
    _impl_.res_ = p;
  }
  return _impl_.res_;
}
inline ::mytest::ResultCode* GetFriendListResPonse::mutable_res() {
  ::mytest::ResultCode* _msg = _internal_mutable_res();
  // @@protoc_insertion_point(field_mutable:mytest.GetFriendListResPonse.res)
  return _msg;
}
inline void GetFriendListResPonse::set_allocated_res(::mytest::ResultCode* res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.res_;
  }
  if (res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(res);
    if (message_arena != submessage_arena) {
      res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, res, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.res_ = res;
  // @@protoc_insertion_point(field_set_allocated:mytest.GetFriendListResPonse.res)
}

// repeated .mytest.User friend_list = 2;
inline int GetFriendListResPonse::_internal_friend_list_size() const {
  return _impl_.friend_list_.size();
}
inline int GetFriendListResPonse::friend_list_size() const {
  return _internal_friend_list_size();
}
inline void GetFriendListResPonse::clear_friend_list() {
  _impl_.friend_list_.Clear();
}
inline ::mytest::User* GetFriendListResPonse::mutable_friend_list(int index) {
  // @@protoc_insertion_point(field_mutable:mytest.GetFriendListResPonse.friend_list)
  return _impl_.friend_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mytest::User >*
GetFriendListResPonse::mutable_friend_list() {
  // @@protoc_insertion_point(field_mutable_list:mytest.GetFriendListResPonse.friend_list)
  return &_impl_.friend_list_;
}
inline const ::mytest::User& GetFriendListResPonse::_internal_friend_list(int index) const {
  return _impl_.friend_list_.Get(index);
}
inline const ::mytest::User& GetFriendListResPonse::friend_list(int index) const {
  // @@protoc_insertion_point(field_get:mytest.GetFriendListResPonse.friend_list)
  return _internal_friend_list(index);
}
inline ::mytest::User* GetFriendListResPonse::_internal_add_friend_list() {
  return _impl_.friend_list_.Add();
}
inline ::mytest::User* GetFriendListResPonse::add_friend_list() {
  ::mytest::User* _add = _internal_add_friend_list();
  // @@protoc_insertion_point(field_add:mytest.GetFriendListResPonse.friend_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mytest::User >&
GetFriendListResPonse::friend_list() const {
  // @@protoc_insertion_point(field_list:mytest.GetFriendListResPonse.friend_list)
  return _impl_.friend_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mytest

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mytest::User_Sex> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mytest::User_Sex>() {
  return ::mytest::User_Sex_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_2eproto
