// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friend.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_friend_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_friend_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021011 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_friend_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_friend_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_friend_2eproto;
namespace frd {
class GetFriendListsRequest;
struct GetFriendListsRequestDefaultTypeInternal;
extern GetFriendListsRequestDefaultTypeInternal _GetFriendListsRequest_default_instance_;
class GetFriendListsResponse;
struct GetFriendListsResponseDefaultTypeInternal;
extern GetFriendListsResponseDefaultTypeInternal _GetFriendListsResponse_default_instance_;
}  // namespace frd
PROTOBUF_NAMESPACE_OPEN
template<> ::frd::GetFriendListsRequest* Arena::CreateMaybeMessage<::frd::GetFriendListsRequest>(Arena*);
template<> ::frd::GetFriendListsResponse* Arena::CreateMaybeMessage<::frd::GetFriendListsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace frd {

// ===================================================================

class GetFriendListsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frd.GetFriendListsRequest) */ {
 public:
  inline GetFriendListsRequest() : GetFriendListsRequest(nullptr) {}
  ~GetFriendListsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetFriendListsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFriendListsRequest(const GetFriendListsRequest& from);
  GetFriendListsRequest(GetFriendListsRequest&& from) noexcept
    : GetFriendListsRequest() {
    *this = ::std::move(from);
  }

  inline GetFriendListsRequest& operator=(const GetFriendListsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFriendListsRequest& operator=(GetFriendListsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFriendListsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFriendListsRequest* internal_default_instance() {
    return reinterpret_cast<const GetFriendListsRequest*>(
               &_GetFriendListsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetFriendListsRequest& a, GetFriendListsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFriendListsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFriendListsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFriendListsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFriendListsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFriendListsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetFriendListsRequest& from) {
    GetFriendListsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFriendListsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frd.GetFriendListsRequest";
  }
  protected:
  explicit GetFriendListsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // uint32 userId = 1;
  void clear_userid();
  uint32_t userid() const;
  void set_userid(uint32_t value);
  private:
  uint32_t _internal_userid() const;
  void _internal_set_userid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:frd.GetFriendListsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t userid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class GetFriendListsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frd.GetFriendListsResponse) */ {
 public:
  inline GetFriendListsResponse() : GetFriendListsResponse(nullptr) {}
  ~GetFriendListsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetFriendListsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFriendListsResponse(const GetFriendListsResponse& from);
  GetFriendListsResponse(GetFriendListsResponse&& from) noexcept
    : GetFriendListsResponse() {
    *this = ::std::move(from);
  }

  inline GetFriendListsResponse& operator=(const GetFriendListsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFriendListsResponse& operator=(GetFriendListsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFriendListsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFriendListsResponse* internal_default_instance() {
    return reinterpret_cast<const GetFriendListsResponse*>(
               &_GetFriendListsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetFriendListsResponse& a, GetFriendListsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFriendListsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFriendListsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFriendListsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFriendListsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFriendListsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetFriendListsResponse& from) {
    GetFriendListsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFriendListsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frd.GetFriendListsResponse";
  }
  protected:
  explicit GetFriendListsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendsFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // repeated bytes friends = 2;
  int friends_size() const;
  private:
  int _internal_friends_size() const;
  public:
  void clear_friends();
  const std::string& friends(int index) const;
  std::string* mutable_friends(int index);
  void set_friends(int index, const std::string& value);
  void set_friends(int index, std::string&& value);
  void set_friends(int index, const char* value);
  void set_friends(int index, const void* value, size_t size);
  std::string* add_friends();
  void add_friends(const std::string& value);
  void add_friends(std::string&& value);
  void add_friends(const char* value);
  void add_friends(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& friends() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_friends();
  private:
  const std::string& _internal_friends(int index) const;
  std::string* _internal_add_friends();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:frd.GetFriendListsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> friends_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friend_2eproto;
};
// ===================================================================

class friendServiceRpc_Stub;

class friendServiceRpc : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline friendServiceRpc() {};
 public:
  virtual ~friendServiceRpc();

  typedef friendServiceRpc_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void GetFriendLists(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::frd::GetFriendListsRequest* request,
                       ::frd::GetFriendListsResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(friendServiceRpc);
};

class friendServiceRpc_Stub : public friendServiceRpc {
 public:
  friendServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  friendServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~friendServiceRpc_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements friendServiceRpc ------------------------------------------

  void GetFriendLists(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::frd::GetFriendListsRequest* request,
                       ::frd::GetFriendListsResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(friendServiceRpc_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetFriendListsRequest

// uint32 userId = 1;
inline void GetFriendListsRequest::clear_userid() {
  _impl_.userid_ = 0u;
}
inline uint32_t GetFriendListsRequest::_internal_userid() const {
  return _impl_.userid_;
}
inline uint32_t GetFriendListsRequest::userid() const {
  // @@protoc_insertion_point(field_get:frd.GetFriendListsRequest.userId)
  return _internal_userid();
}
inline void GetFriendListsRequest::_internal_set_userid(uint32_t value) {
  
  _impl_.userid_ = value;
}
inline void GetFriendListsRequest::set_userid(uint32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:frd.GetFriendListsRequest.userId)
}

// -------------------------------------------------------------------

// GetFriendListsResponse

// bool success = 1;
inline void GetFriendListsResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool GetFriendListsResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool GetFriendListsResponse::success() const {
  // @@protoc_insertion_point(field_get:frd.GetFriendListsResponse.success)
  return _internal_success();
}
inline void GetFriendListsResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void GetFriendListsResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:frd.GetFriendListsResponse.success)
}

// repeated bytes friends = 2;
inline int GetFriendListsResponse::_internal_friends_size() const {
  return _impl_.friends_.size();
}
inline int GetFriendListsResponse::friends_size() const {
  return _internal_friends_size();
}
inline void GetFriendListsResponse::clear_friends() {
  _impl_.friends_.Clear();
}
inline std::string* GetFriendListsResponse::add_friends() {
  std::string* _s = _internal_add_friends();
  // @@protoc_insertion_point(field_add_mutable:frd.GetFriendListsResponse.friends)
  return _s;
}
inline const std::string& GetFriendListsResponse::_internal_friends(int index) const {
  return _impl_.friends_.Get(index);
}
inline const std::string& GetFriendListsResponse::friends(int index) const {
  // @@protoc_insertion_point(field_get:frd.GetFriendListsResponse.friends)
  return _internal_friends(index);
}
inline std::string* GetFriendListsResponse::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:frd.GetFriendListsResponse.friends)
  return _impl_.friends_.Mutable(index);
}
inline void GetFriendListsResponse::set_friends(int index, const std::string& value) {
  _impl_.friends_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:frd.GetFriendListsResponse.friends)
}
inline void GetFriendListsResponse::set_friends(int index, std::string&& value) {
  _impl_.friends_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:frd.GetFriendListsResponse.friends)
}
inline void GetFriendListsResponse::set_friends(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.friends_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:frd.GetFriendListsResponse.friends)
}
inline void GetFriendListsResponse::set_friends(int index, const void* value, size_t size) {
  _impl_.friends_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:frd.GetFriendListsResponse.friends)
}
inline std::string* GetFriendListsResponse::_internal_add_friends() {
  return _impl_.friends_.Add();
}
inline void GetFriendListsResponse::add_friends(const std::string& value) {
  _impl_.friends_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:frd.GetFriendListsResponse.friends)
}
inline void GetFriendListsResponse::add_friends(std::string&& value) {
  _impl_.friends_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:frd.GetFriendListsResponse.friends)
}
inline void GetFriendListsResponse::add_friends(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.friends_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:frd.GetFriendListsResponse.friends)
}
inline void GetFriendListsResponse::add_friends(const void* value, size_t size) {
  _impl_.friends_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:frd.GetFriendListsResponse.friends)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetFriendListsResponse::friends() const {
  // @@protoc_insertion_point(field_list:frd.GetFriendListsResponse.friends)
  return _impl_.friends_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetFriendListsResponse::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:frd.GetFriendListsResponse.friends)
  return &_impl_.friends_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace frd

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_friend_2eproto
